

*** Everything in python is Ojbect ***
*** Every object contains methods ***



number
-------
number can be integer or decimal or octal or hexa.

val = 10
aval = 34.43


string
------
string is defined in single quotes or double or triple quotes.

aname = 'python programming'
bname = "scala programming"
cname = """golang programming"""
dname = '''java language'''


list
-----
list contains set of elements.
Elements can be set of numbers or strings or anyc combination.

alist = [10,20,30,40]
blist = ["java","scala","spark"]
clist = [34,32.345,'unix']
dlist = [[2,3,43],[23,"unix"]]   # list of lists
dlist = [[2,3,43],[23,"unix"],{"chap1":10,"chap2":20}]


tuple ( immutable , uneditable , unchangeable )
------
tuple contains set of elements.
Elements can be set of numbers or strings or anyc combination.
tuple elements are defined in ().
**** Elements inside tuple cannot be modified directly ******

atup = (34,32,34,3)
btup = ("java","scala","spark")



dictionary ( hash  in perl , hashmap ,  json )
-----------------------------------------
dictionary contains elements in key-value pairs
dictionary elements are defined in {}.

syntax:   object = {key:value , key:value , key:value}
          book   = {"chap1":10 ,"chap2":20 ,"chap3":30}
	  bookinfo   = {"chap1":[10,"rita","US"] ,"chap2":[20,"Ram","UK"] }
          values = {1:2,3:4,5:6}
          book   = {"chap1":10 ,"chap2":20 ,"chap3":30 ,"chap1":100}


a = 10
a = 100
print(a)





set
----
set is UNORDERED collection of UNIQUE values of same type.


aset = {10,10,10,20,30}



level1
level1
level1
level1
if cond:
    level2
    level2
    level2
    level2
else:
    level2
    level2

operators
-----------


arithmetic operators :   + - * % /


relational operators :  
---------------------
< <= > >= == !=


logical operators
------------------
and
or
not

name = 'python'
if len(name) == 6   and name.islower() :
   # do something


if not name.isupper():
    # do something



assignment operators ( ++ and -- are NOT allowed in python )
---------------------

val = 10
val+=1    (or)   val = val + 1   
val-=1     (or)  val = val -1    


speical operators
-----------------
in
as
*
+










file handling
---------------

- working with flat files ( .txt  .conf .csv   .log .conf  .properties  .xml ... )
---------------------------

r : read mode
w : write mode
a : append mode


opening the file
----------------
syntax     object = open(filename,mode)
example:     fr = open("customers.txt","r")
             fw = open("customers.txt","w")
             fa = open("customers.txt","a")
 


closing the file
---------------
fr.close()



file read operation
-----------------------

- reading the file line by line using fobj
- fobj.readlines()   ----> output will be in list
- fobj.read()        ----> output will be in string
- using csv libary
- using json library
- using pandas library

























- working with third party files (  pdf   docx  pptx   .rar   .zip ..)
------------------------------------
In order to read third party files ending with pdf or xlsx or rar or zip we use either builtin or third party library


pdf - pdfminder
xlsx- openpyxl  or xlsxwriter or pandas
rar - rarfile
zip - zipfile














































































